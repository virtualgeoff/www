#VRML V2.0 utf8

WorldInfo {
   title "Spherical Lineset"
   info ["Geoff Pack, Spike, Feb 2000"]
}

NavigationInfo {
    headlight TRUE
    speed 0.8
    type ["EXAMINE","ANY"]
}

Viewpoint {
    position 0 0 5
    description "side"
}

Viewpoint {
    position 0 0 1
    description "inside"
}

DEF OBJECT1 Transform {
    rotation     1 0 0 0
    center       0 1 0
    children [
        Shape {
            geometry DEF LineSet IndexedLineSet {
                coord DEF LineSetCoords Coordinate {
                    point [ ]
                }
                coordIndex [ ]
            }
        }
    ]
}

DEF TIMER1 TimeSensor {
    cycleInterval    10
    stopTime    -1
    loop        TRUE
}

DEF ROTATE1 OrientationInterpolator {
    key      [ 0, .25, .5, .75, 1 ]
    keyValue     [ 0 1 0 0, 0 1 0 1.5708, 0 1 0 3.1416, 0 1 0 4.7124, 0 1 0 6.2832 ]
}

DEF LineSetScript Script {
    eventOut MFVec3f  point_Changed
    eventOut MFInt32  index_Changed

    field    MFVec3f  point     0.0 0.0 0.0
    field    MFInt32  index     0
    field    SFInt32  radius    1
    field    SFFloat  Pi        3.1415926

    url "javascript:
        function initialize() {
            var i = 0;  // index for point array
            var j = 0;  // index for coordIndex array

            for (phi=0; phi<=180; phi+=10) {
                for (theta=0; theta<=360; theta+=10) {
                    // convert theta, phi to radians:
                    thetaR = theta * (2 * Pi / 360);
                    phiR = phi * (2 * Pi / 360);
                    point[i].x = radius * Math.sin(thetaR) * Math.sin(phiR);
                    point[i].z = radius * Math.cos(thetaR) * Math.sin(phiR);
                    point[i].y = radius * Math.cos(phiR);

                    // debugging step
                    print('Theta = ' + theta + ', Phi = ' + phi);
                    print('point coords:  ' + point[i]);

                    index[j] = i;
                    i++;
                    j++;

                    // find only one point at poles!
                    if ((phi==0) || (phi==180)) break;
                }
                // close each line
                index[j] = -1;
                j++;
            }
            // Send the points to the empty geometry
            point_Changed = point;
            index_Changed = index;


        }
    "
}

ROUTE LineSetScript.point_Changed TO LineSetCoords.set_point
ROUTE LineSetScript.index_Changed TO LineSet.set_coordIndex

ROUTE TIMER1.fraction_changed TO ROTATE1.set_fraction
ROUTE ROTATE1.value_changed TO OBJECT1.set_rotation


