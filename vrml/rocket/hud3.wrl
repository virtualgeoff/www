#VRML V2.0 utf8# Heads Up Display (HUD) with controls# by Bob Crispen, after the simple HUD by Chris Fouts# modified by Vladimir BulatovPROTO HUD [  exposedField SFVec3f size 1.e10 1.e10 1.e10  exposedField SFVec3f translation 0.0 0.0 -10  exposedField SFRotation rotation 0 0 0 0  field MFNode children []]{    Group {    children [    #    # Make the sensor large enough to cover world    #    DEF UserPosition ProximitySensor {            center 0 0 0            size IS size    }    #    # Transform containing the HUD shape.    # Gets its translation and rotation values from HUDProx.  The    # origin of the transformed space will be at the Viewpoint.    # The HUD shape objects are offset to make them visible (outside    # the inner clipping plane).    #    DEF HUD Transform {        children [        Transform {        children [        # Offset HUD objects relative to viewpoint by a -ve Z        # value such that it is not clipped by near clipping        # plane and is inside the collision radius defined by the        # avatar size so the HUD does not get occluded by objects        # when you bump into them.        Transform {            translation IS translation            rotation IS rotation            # The HUD shape itself            children IS children        }        ]        }        ]    }    #    # The UserPosition and orientation is routed to the HUD Transform    # thus HUD moves with  user.    #    # end of HUD    ]    }    ROUTE UserPosition.position_changed TO HUD.translation    ROUTE UserPosition.orientation_changed TO HUD.rotation} # end of HUD PROTOPROTO Slider [eventOut SFFloat value_changed]{    DEF Slider Group {    children [    # Bezel    DEF PS PlaneSensor {        maxPosition 0 4        minPosition 0 -4    }   Transform {       translation 0 0 -0.3       children Shape {       geometry Box {           size 40 10 0.1       }       appearance Appearance {           material Material {           transparency 1           }       }       }   }    Shape {        appearance Appearance {        material Material {            diffuseColor .8 .8 0        }        }        geometry IndexedFaceSet {        coord Coordinate {            point [            -1.5 -5 0, -0.25 -5 0, 0.25 -5 0, 1.5 -5 0,            -0.25 -4 0, 0.25 -4 0, -0.25 4 0, 0.25 4 0,            -1.5 5 0, -0.25 5 0, 0.25 5 0, 1.5 5 0            ]        }        coordIndex [        0 1 9 8 -1, 2 3 11 10 -1,        1 2 5 4 -1, 6 7 10 9 -1        ]        }    }    DEF Handle Transform {        children [        Shape {        appearance Appearance {            material Material {            diffuseColor 0.55 0.47 0.14            }        }        geometry Box { size 2 2 2 }        }        ]    }    # Dial face    Transform {        translation 0 8 0        rotation 1 0 0 1.570795        children [        Shape {        appearance Appearance {            material Material {            diffuseColor 0.8 0.8 0.8            }        }        geometry Cylinder { radius 2 height 0.1 }        }        ]    }    DEF Pointer Transform {        translation 0 8 0.1        rotation 0 0 1 0        children [        Shape {        appearance Appearance {            material Material {            diffuseColor 1 0 0            }        }        geometry IndexedFaceSet {            coord Coordinate {            point [            -0.2 0 0, 0.2 0 0, 0 2 0            ]            }            coordIndex [ 0 1 2 -1 ]        }        }        ]    }    ]    }    # Drives the speedometer pointer    DEF OI OrientationInterpolator {    key [ -4 0 4 ]  # If you change the rate, change this too    keyValue [ 0 0 1 3, 0 0 1 0, 0 0 1 -3 ]    }    # Equations of motion (some equations!)    DEF SLIDER_SCRIPT Script {    eventIn  SFRotation show    eventIn  SFVec3f set_velocity    eventOut SFVec3f position_changed    eventOut SFFloat stripped IS value_changed    field SFFloat rate 1    url [ "javascript:    // Set the Z velocity from the Y value of the slider pot    function set_velocity(value) {        v = value.y * rate;        // Center detent        if ((v < 0.2) && (v > -0.2)){           v = 0.0;        }        stripped = v;       // Drives the speedometer    }    ",    "vrmlscript:    function set_velocity(value) {        v = value.y * rate;        if ((v < 0.2) && (v > -0.2)){           v = 0.0;        }        stripped = v;    }    "]    }    ROUTE PS.translation_changed TO Handle.set_translation    ROUTE PS.translation_changed TO SLIDER_SCRIPT.set_velocity    ROUTE SLIDER_SCRIPT.stripped TO OI.set_fraction    ROUTE OI.value_changed TO Pointer.set_rotation}DEF VIEWPOINT Viewpoint {    position  0 1.8 31    orientation 0 0 1  0    fieldOfView 0.785398    description "Entry View"}HUD {    translation 2 -1 -5    children [    Transform {    scale 0.1 0.1 0.1    children DEF SLIDER Slider {    }    }    ]}NavigationInfo {    # type "NONE"    avatarSize [ 0.25, 1.8, 0.75 ]    speed 10    headlight FALSE}DirectionalLight {    intensity 1    direction 0.3 -1 -0.5}## The world#Group {    children [    DEF FloorGroup Group {    children [    DEF FloorShape Shape {        appearance Appearance {        material DEF FloorColor Material {            diffuseColor 0 0 0            specularColor 0.5 0 0            ambientIntensity 0            emissiveColor 0.2 0.2 0.4        }        }        geometry DEF FloorIFS IndexedFaceSet {        coord DEF FloorCoordinates Coordinate {            point   [ -200 0 -200, 200 0 -200, -200 0 200, 200 0 200 ]        }        solid   TRUE        creaseAngle 0.5        coordIndex [ 0 2 1 -1, 1 2 3 -1 ]        colorIndex [ 0 0 0 -1, 0 0 0 -1 ]        }    }    ]    }    Transform {    translation 0 2 0    children DEF Obstacle Shape {        appearance Appearance {        material Material { diffuseColor .8 0 0 }        }        geometry Box { size 1 4 1 }    }    }    Transform {    translation 5 2 5    children USE Obstacle    }    Transform {    translation -5 2 5    children USE Obstacle    }    Transform {    translation 5 2 -5    children USE Obstacle    }    Transform {    translation -5 2 -5    children USE Obstacle    }    ]}# Drives the position updateDEF TS TimeSensor {    cycleInterval 1    loop TRUE}DEF Mover Script {    directOutput TRUE    eventIn SFTime tick    eventOut SFVec3f position_changed    eventIn SFFloat set_velocity    field SFVec3f v 0 0 0       # Velocity    field SFFloat dt 0.2        # Delta time    field SFTime tn1 0              # Last tick's time value    field SFFloat rate 1        # Rate constant    field SFBool first TRUE         # This is the first tick    field SFVec3f p  0 0 0              # Position    field SFNode viewpoint USE VIEWPOINT    url[    "javascript:    function initialize(){    p = viewpoint.position;    }    // Every time the clock ticks, update the position    // from the most recent velocity from the slider pot    // We recompute the delta time from the actual value    // sent by the TimeSensor so velocity is more or less    // constant, even on slow machines.    // To do:    // (a) We might be able to send a computed delta time    //     back to the TimeSensor.cycleInterval    // (b) Better way to manage delta time?    function tick(value) {    if (first) {        first = false;        tn1 = value;        // And use the preset dt    } else {        dt = value - tn1;        tn1 = value;    }    p.z -= v.z * dt;        // +ve velocity = -ve Z    viewpoint.position = p;    }    function set_velocity(value){    v.z = value;    }    "    "vrmlscript:    function initialize(){    p = viewpoint.position;    }    function tick(value) {    if (first) {        first = false;        tn1 = value;        // And use the preset dt    } else {        dt = value - tn1;        tn1 = value;    }    p.z -= v.z * dt;        // +ve velocity = -ve Z    viewpoint.position = p;    }    function set_velocity(value){    v.z = value;    }    "    ]}ROUTE SLIDER.value_changed TO Mover.set_velocityROUTE TS.time TO Mover.tickROUTE Mover.position_changed TO VIEWPOINT.set_position