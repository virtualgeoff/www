#VRML V2.0 utf8

WorldInfo {
  title   "Wave Simulator, beta 3"
  info    ["Geoff Pack, Spike, 1999",
           "geoff@spike.com.au"]
}

NavigationInfo {
  headlight TRUE
  speed     25
  type      ["EXAMINE","WALK","ANY"]
}

Background {
  groundAngle [ 1.5708 ]
  groundColor [ 0.1 0.1 0.1, 0.1 0.1 0.1 ]
  skyAngle    [ 1.0, 1.5708 ]
  skyColor    [ 0.2 0.2 0.7, 0.3 0.3 0.8, 0.7 0.5 0.2]
}

Viewpoint {
  description "front"
  position    0 50 200
  orientation 1 0 0 -0.4
}
Viewpoint {
  description "side"
  position    -200 2 0
  orientation 0 1 0 -1.5708
}
Viewpoint {
  description "above"
  position    0 300 0
  orientation 1 0 0 -1.5708
}

DirectionalLight {
  direction         0 -1 -1
  ambientIntensity  0.5
}

#--------------------------------------
# Wave Elevation Grid Proto

PROTO sinWaveEG [
  eventOut  SFVec3f   queryPointReturn
  eventIn   SFVec3f   queryPointInput

  field     SFInt32   xDimension      2
  field     SFFloat   xSpacing        100
  field     SFInt32   zDimension      200
  field     SFFloat   zSpacing        1
  field     SFFloat   waveAmplitude   5.0
  field     SFFloat   waveSpeed       10.0
  field     SFFloat   waveLength      40
]{

#--------------------------------------
# sinWaveEG geometry

DEF Wave Transform {
  scale         1 1 1
  translation   -50 0 -100
  children [
    Shape {
      appearance Appearance {
        material Material {
          diffuseColor    0 .2 .5
          specularColor   .2 .2 .2
          shininess       .9
          transparency    .2
        }
      }
      geometry DEF WaveGrid ElevationGrid {
        xDimension    IS xDimension
        xSpacing      IS xSpacing
        zDimension    IS zDimension
        zSpacing      IS zSpacing
        creaseAngle   1
        solid         FALSE
        color DEF ColorList Color {}
      }
    }
  ]
}

#--------------------------------------
# Timer

DEF WaveTimer TimeSensor {
  cycleInterval 1
  stopTime      -1
  loop          TRUE
}

#--------------------------------------
# Motion Script

DEF WaveScript Script {
  eventIn   SFFloat   change
  eventIn   SFTime    animateGrid
  eventIn   SFTime    queryTimeInput
  eventIn   SFVec3f   queryPointInput     IS queryPointInput
  eventOut  SFVec3f   queryPointReturn    IS queryPointReturn

  field     SFNode    waveGrid            USE WaveGrid
  field     MFFloat   gridHeight          []
  field     SFInt32   xDimension          IS xDimension
  field     SFFloat   xSpacing            IS xSpacing
  field     SFInt32   zDimension          IS zDimension
  field     SFFloat   zSpacing            IS zSpacing
  field     SFVec3f   queryPoint          0 0 0

  field     SFNode    colorList           USE ColorList
  field     MFColor   gridColor           []
  field     SFColor   waveColor           0 0.2 0.5
  field     SFColor   waveTipColor        0.7 0.5 0.2

  field     SFFloat   waveAmplitude       IS waveAmplitude
  field     SFFloat   waveSpeed           IS waveSpeed
  field     SFFloat   waveLength          IS waveLength
  field     SFFloat   pi                  3.14159
  field     SFTime    beginTime           0

  directOutput  TRUE
  mustEvaluate  TRUE

  url "javascript:
    function initialize(){
      // initialize grid values:
      var length = xDimension * zDimension;
      for(var i=0; i<length; i++){
        gridHeight[i] = 0;
      }
      waveGrid.set_height = gridHeight;

      // initialize color values:
      var length = xDimension * zDimension;
      for(var i=0; i<length; i++){
        gridColor[i] = waveColor;
      }
      colorList.set_color = gridColor;
    }

    function animateGrid(timeValue) {
      if (beginTime == 0) {
        // first time animateGrid is called:
        beginTime = timeValue;
      } else {
        // all subsequent times:
        var t = timeValue - beginTime;
        for(var z=0; z<zDimension; z++){
          var m=z*xDimension + 0;
          // only calculate waveheight for first z value (waveheight is identical across x):
          gridHeight[m] = waveAmplitude * Math.sin((2*pi/waveLength)*(z*zSpacing - t*waveSpeed));
          // set gridColor:
          if (gridHeight[m] > waveAmplitude*3/4) {
            gridColor[m] = waveTipColor;
          } else {
            gridColor[m] = waveColor;
          }
          // copy gridheight & color along wave:
          for(var x=1; x<xDimension; x++){
            var n=z*xDimension + x;
            gridHeight[n] = gridHeight[m];
            gridColor[n] = gridColor[m];
          }
        }
        // send values to appropriate nodes:
        waveGrid.set_height = gridHeight;
        colorList.set_color = gridColor;
      }
    }
    function queryPointInput(value) {
      queryPoint = value;
    }
    function queryTimeInput(timeValue) {
      // assumes waveGrid is symmetrical around origin!
      // nb. wave translation is -50 0 -100
      var x = Math.round(queryPoint[0]/xSpacing + 50/xSpacing);
      var z = Math.round(queryPoint[2]/zSpacing + 100/zSpacing);

      // return height for x,z coords:
      var n=z*xDimension + x;
      queryPointReturn[0] = queryPoint[0];
      queryPointReturn[1] = gridHeight[n];
      queryPointReturn[2] = queryPoint[2];
    }

  "
}

#--------------------------------------
# Routing

ROUTE WaveTimer.time TO WaveScript.animateGrid
ROUTE WaveTimer.time TO WaveScript.queryTimeInput

#--------------------------------------
# End Proto
}


#--------------------------------------
# Sea Wave

DEF SeaWave sinWaveEG {
  waveAmplitude   5.0
  waveSpeed       10.0
  waveLength      50.0
}

#--------------------------------------
# Floating Object

DEF Floater Transform {
  translation   0 0 0
  rotation      0 1 0 0
  children [
    Shape {
      appearance Appearance {
        material Material {
          diffuseColor  1 1 0
          shininess     .5
        }
      }
      geometry Sphere { radius 1 }
    }
  ]
}

ROUTE Floater.translation_changed TO SeaWave.queryPointInput
ROUTE SeaWave.queryPointReturn TO Floater.set_translation

