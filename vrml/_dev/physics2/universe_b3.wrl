#VRML V2.0 utf8

WorldInfo {
  title   "Physics Simulator, beta 3"
  info    "Geoff Pack, Spike, 1999"
}

NavigationInfo {
  headlight TRUE
  type      ["WALK","EXAMINE","ANY"]
}

Background {
  groundAngle [ 1.5708 ]
  groundColor [ 0.1 0.1 0.1, 0.1 0.1 0.1 ]
  skyAngle    [ 1.0, 1.5708 ]
  skyColor    [ 0.2 0.2 0.7, 0.3 0.3 0.8, 0.7 0.5 0.2]
}

Viewpoint {
  description "v1"
  position 0 15 35
  orientation 1 0 0 -0.4
}
Viewpoint {
  description "entry"
  position 0 0 30
}


#--------------------------------------
# Lights

DirectionalLight {
  color       1 1 1
  direction   0 -1 0
  intensity   1
  on          TRUE
}

#--------------------------------------
# Grid:

Transform {
  translation   0 0 0
  rotation      0 1 0 0
  scale         10 10 10
  children [
    Inline {
      url       "grid.wrl"
    }
  ]
}

#--------------------------------------
# HUD Controls:

EXTERNPROTO sixDofHud [
  eventOut  SFVec3f     translationOut
  eventOut  SFVec3f     rotationOut

  field     SFColor     lineColor
  field     SFColor     boxColor
] "sixDofHud.wrl"

# HUD 1
DEF Hud1 sixDofHud {
  lineColor   1 .5 0
  boxColor    1 0 .5
}

#--------------------------------------
# Objects

EXTERNPROTO extendedMass [
  eventIn   SFVec3f     appliedForce
  eventIn   SFVec3f     appliedTorque
  eventOut  SFVec3f     positionOut

  field     SFVec3f     initialPosition
  field     SFVec3f     initialVelocity
  field     SFVec3f     initialAcceleration
  field     SFVec3f     initialOrientation
  field     SFVec3f     initialAngularVelocity
  field     SFVec3f     initialAngularAcceleration
  field     SFFloat     mass
  field     SFVec3f     momentsOfInertia
  field     MFNode      children
] "extendedMass_b2.wrl"

# Mass 1
DEF Mass1 extendedMass {
  initialPosition   30 0 0
  initialVelocity   0 0 -15
  children [
    Inline {
      url "coord_axes.wrl"
    }
    Shape {
      appearance Appearance {
        material Material {
          diffuseColor  1 0 1
          shininess     .5
        }
      }
      geometry Box { size  0.6 0.4 0.8 }
    }
  ]
}

# Mass 2
DEF Mass2 extendedMass {
  initialPosition 0 0 0
  mass            1000
  children [
    Shape {
      appearance Appearance {
        material Material {
          diffuseColor  1 1 0
          shininess     .5
        }
      }
      geometry Sphere { radius  1 }
    }
  ]
}

#--------------------------------------
# Force Scripts

DEF ForceGenerator Script {
  eventIn   SFVec3f     position1In
  eventIn   SFVec3f     position2In
  eventOut  SFVec3f     force1Out
  eventOut  SFVec3f     force2Out
  #eventOut  SFVec3f     torque1
  #eventOut  SFVec3f     torque2

  field     SFVec3f     position1   5 0 -10
  field     SFVec3f     position2   0 0 -10
  field     SFVec3f     r           0 0 0
  field     SFVec3f     force1      0 0 0
  field     SFVec3f     force2      0 0 0

  field     SFFloat     fx          0
  field     SFFloat     rsqr        0
  field     SFFloat     mass1       1
  field     SFFloat     mass2       1000
  field     SFFloat     G           1.5

  url "javascript:
    function initialize() {
    }
    function position1In(value) {
      position1[0] = value[0];
      position1[1] = value[1];
      position1[2] = value[2];
    }
    function position2In(value) {
      position2[0] = value[0];
      position2[1] = value[1];
      position2[2] = value[2];
    }
    function eventsProcessed() {
      r[0] = position1[0] - position2[0];
      r[1] = position1[1] - position2[1];
      r[2] = position1[2] - position2[2];
      rsqr = r[0]*r[0] + r[1]*r[1] + r[2]*r[2];
      fx = (G * mass1 * mass2) / rsqr ;

      //print('r = ' + r);
      //print('rsqr = ' + rsqr);
      //print('fx = ' + fx);

      force1[0] = fx * -r[0]
      force1[1] = fx * -r[1]
      force1[2] = fx * -r[2]
      force2[0] = fx * r[0]
      force2[1] = fx * r[1]
      force2[2] = fx * r[2]

      //print('');
      //print('position1 = ' + position1);
      //print('position2 = ' + position2);
      //print('r = ' + r);
      //print('force1 = ' + force1);

      force1Out = force1;
      force2Out = force2;

    }
  "
}

DEF ForceAdder Script {
  eventIn   SFVec3f     force1In
  eventIn   SFVec3f     force2In
  eventOut  SFVec3f     forceSumOut

  field     SFVec3f     force1      0 0 0
  field     SFVec3f     force2      0 0 0
  field     SFVec3f     forceSum    0 0 0

  url "javascript:
    function force1In(value) {
      force1 = value;
    }
    function force2In(value) {
      force2 = value;
    }
    function eventsProcessed() {
      forceSum[0] = force1[0] + force2[0];
      forceSum[1] = force1[1] + force2[1];
      forceSum[2] = force1[2] + force2[2];
      forceSumOut = forceSum;
    }
  "
}

#--------------------------------------
# Routing

# Connect the HUD controls to the extendedMass inputs & ForceAdder
ROUTE Hud1.translationOut TO ForceAdder.force1In
ROUTE Hud1.rotationOut TO Mass1.appliedTorque

# Connect Masses to ForceGenerator
ROUTE Mass1.positionOut TO ForceGenerator.position1In
ROUTE Mass2.positionOut TO ForceGenerator.position2In

ROUTE ForceGenerator.force2Out TO Mass2.appliedForce

ROUTE ForceGenerator.force1Out TO ForceAdder.force2In
ROUTE ForceAdder.forceSumOut TO Mass1.appliedForce




