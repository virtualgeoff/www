#VRML V2.0 utf8

WorldInfo {
  title     "Driving II"
  info      "Geoff Pack, Spike, 1999"
}

NavigationInfo {
  headlight TRUE
  type      ["WALK","EXAMINE","ANY"]
}

Background {
  groundAngle [ 1.5708 ]
  groundColor [ 0.3 0.3 0.3, 0.15 0.15 0.15 ]
  skyAngle    [ 1.0, 1.5708 ]
  skyColor    [ 0.2 0.2 0.7, 0.3 0.3 0.8, 0.7 0.5 0.2]
}

#------------------------------------------------------------
# Tracking Camera:

DEF trackingAzimuth Transform {
    translation     0 10 0
    rotation        0 1 0 0
    children [
        DEF trackingAltitude Transform {
            translation     0 0 0
            rotation        1 0 0 0
            children [
                 Viewpoint {
                    description "Tracking Cam"
                    position 0 0 0
                    orientation 1 0 0 0
                }
            ]
        }
    ]
}

#------------------------------------------------------------
# Stationary Viewpoint

Viewpoint {
    description "Stationary"
    position 0 7 20
    orientation 1 0 0 -.03
}


#------------------------------------------------------------
# Lights

DirectionalLight {
  color       1 1 1
  direction   0 -1 0
  intensity   1
  on          TRUE
}

#------------------------------------------------------------
# Grid:

Transform {
    translation     0 0 0
    rotation        0 1 0 0
    scale           10 10 10
    children [
        Inline {
            url     "grid.wrl"
        }
    ]
}


#------------------------------------------------------------
# Car Transform

DEF CarTran Transform {
  translation  0 0 -20
  rotation      0 1 0 0
  children [
    DEF CarRot Transform {
      rotation      0 1 0 0
      children [
        Inline {
          url "car.wrl"
        }

      ]
    }
    DEF engineSound Sound {
      source AudioClip {
        url       ["engine.wav"]
        stopTime  -1
        loop      TRUE
        pitch     1.0
      }
      intensity   0
      maxFront    5000
      minFront    50
      maxBack     5000
      minBack     50
      spatialize  TRUE
    }
  ]
}

#------------------------------------------------------------
# HUD

DEF HudGroup Collision {
  collide   FALSE
  children  [
    DEF HudProx ProximitySensor {
      center  0 0 0
      size    100000 100000 100000
    }
    DEF HudXform Transform {
      translation   0 0 0
      rotation      0 0 1  0
      children [
        Transform {
          translation   -1.5 0 -4
          #rotation     1 0 0  1.5708
          children [

            # blue lines
            Transform {
              children [
                Shape {
                  appearance Appearance {
                    material Material { emissiveColor 0 0 1 }
                  }
                  geometry IndexedLineSet {
                    coord Coordinate {
                      point [ -1 0 0, 1 0 0, 0 -1 0, 0 1 0]
                    }
                    coordIndex [ 0, 1, -1, 2, 3, -1]
                  }
                }
              ]
            }

            # X-Y axis
            Transform {
              translation 0 0 0
              children [
                DEF sliderXY Transform {
                  children [
                    Shape {
                      appearance Appearance {
                        material Material { diffuseColor 1 1 0 }
                      }
                      geometry Box { size 0.15 0.15 0.15 }
                    }
                  ]
                }
                DEF carControls1 PlaneSensor {
                  maxPosition  1 1
                  minPosition  -1 -1
                  offset     0 0 0
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}

ROUTE HudProx.position_changed TO HudXform.set_translation
ROUTE HudProx.orientation_changed TO HudXform.set_rotation

#------------------------------------------------------------
# Timers

DEF Clock TimeSensor {
   cycleInterval  0.05
   stopTime -1
   loop   TRUE
}

#------------------------------------------------------------
# Motion Script

DEF MotionScript Script {
  eventIn   SFVec3f     carControls1
  eventIn   SFTime      moveCar
  eventOut  SFVec3f     carPositionChanged
  eventOut  SFRotation  carOrientationChanged
  eventOut  SFFloat     engineSound

  field     SFVec3f     carPosition             0 0 -20
  field     SFVec3f     carVelocity             0 0 0
  field     SFFloat     carSpeed                0
  field     SFRotation  carOrientation          0 1 0 0
  field     SFRotation  carAngularVelocity      0 1 0 0
  field     SFFloat     steeringAngle           0

  field     SFFloat     dt  0.05

  url "javascript:

    function carControls1(value) {
      carSpeed = -20 * value[1];
      steeringAngle = -1 * value[0];
      engineSound = Math.abs(value[1]);
    }

    function moveCar(timeValue) {
      // determine new position:
      carPosition[0] += carVelocity[0] * dt;
      carPosition[2] += carVelocity[2] * dt;
      carOrientation[3] += carAngularVelocity[3] * dt;

      // update velocities
      carVelocity[0] = carSpeed * Math.sin(carOrientation[3]);
      carVelocity[2] = carSpeed * Math.cos(carOrientation[3]);
      carAngularVelocity[3] = steeringAngle * -carSpeed/10

      // update positions:
      carPositionChanged = carPosition;
      carOrientationChanged = carOrientation;
    }
  "
}

#------------------------------------------------------------
# Tracking Camera Script:

DEF TrackingScript Script {
  eventIn   SFVec3f     set_position
  eventOut  SFRotation  azimuthChanged
  eventOut  SFRotation  altitudeChanged

  field     SFVec3f     pos         0 0 0
  field     SFVec3f     cameraPos   0 10 0

  field     SFFloat     dt  0.05

  url "javascript:
    function set_position(value) {
      pos[0] = value[0] - cameraPos[0];
      pos[1] = value[1] - cameraPos[1];
      pos[2] = value[2] - cameraPos[2];
      r = Math.sqrt(pos[0]*pos[0]+pos[2]*pos[2]);

      azimuthChanged[0] = 0;
      azimuthChanged[1] = 1;
      azimuthChanged[2] = 0;

      if (pos[0]<=0) azimuthChanged[3] = Math.acos(-pos[2]/r);
      else azimuthChanged[3] = -Math.acos(-pos[2]/r);

      altitudeChanged[0] = 1;
      altitudeChanged[1] = 0;
      altitudeChanged[2] = 0;
      altitudeChanged[3] = -Math.atan(-pos[1]/r);
    }
  "
}

#------------------------------------------------------------
# Routing:

# Connect the control sensor to slider and motion script
ROUTE carControls1.translation_changed TO sliderXY.set_translation
ROUTE carControls1.translation_changed TO MotionScript.carControls1

# Connect clock to motion script
ROUTE Clock.cycleTime TO MotionScript.moveCar

# Connect motion script outputs to car, shadow, sound
ROUTE MotionScript.carPositionChanged TO CarTran.set_translation
ROUTE MotionScript.carOrientationChanged TO CarRot.set_rotation
ROUTE MotionScript.engineSound TO engineSound.set_intensity

# Connect motion script outputs to tracking script
ROUTE MotionScript.carPositionChanged TO TrackingScript.set_position

# Connect tracking script outputs to tracking camera
ROUTE TrackingScript.azimuthChanged TO trackingAzimuth.set_rotation
ROUTE TrackingScript.altitudeChanged TO trackingAltitude.set_rotation

