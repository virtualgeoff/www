import java.applet.*;import java.awt.*;import java.awt.image.*;public class ImageStrip extends Applet implements Runnable {	Thread animation;		Graphics offscreen;	AudioClip ip;					// sound		Image image;					// background image ?	Image currentImg;				// current image showing	Image strip0, strip1;			// the image strips	Image images0[],images1[];		// the individual images of the strip	int n0 = 0;						// number of images across in strip0	int m0 = 0;						// number of images down   in strip0	int n1 = 0;						// number of images across in strip1	int m1 = 0;						// number of images down   in strip1	int height;	boolean engineOn = false;		// if engine on/off	int orientation = 0;			// orientation			static final int W = 600;	// width of applet	static final int H = 400;	// height of applet	static final int REFRESH_RATE = 20; // in millisecs (50 fps)	public void init() {		strip0 = getImage(getCodeBase(),"images/lander_off.gif");		strip1 = getImage(getCodeBase(),"images/lander_on.gif");		ip = getAudioClip (getCodeBase(),"audio/ip.au");				// wait for images to load:		while ((strip0.getWidth(this) <0) || (strip1.getWidth(this) <0));		// define number of images:		n0 = 6; m0 = 4;		n1 = 6; m1 = 4;				// define image arrays:		images0 = new Image[n0*m0];		images1 = new Image[n1*m1];				// extract the images:		extractImages(strip0,images0,6,4,100,100);		extractImages(strip1,images1,6,4,100,100);				// background ?		setBackground(Color.black);		image = createImage(W,H);		offscreen = image.getGraphics();				// set current image:		currentImg = images1[4];	}	// --------------------------------------------------------------------------------		// image extraction method	// --------------------------------------------------------------------------------		public void extractImages(Image strip, Image images[], int n, int m, int w, int h) {		// n, m = number of images across, down image strip		// w, h = width, height of each subimage				ImageProducer source = strip.getSource();				for (int j=0; j<m; j++) {			for (int i=0; i<n; i++) {				//define filter to pull images:				ImageFilter extractFilter = new CropImageFilter(i*w, j*h, w, h);				// define procducer to from source and filter:				ImageProducer producer = new FilteredImageSource(source,extractFilter);				// extract the subimage:				images[j*n+i] = createImage(producer);			}		}	}	// --------------------------------------------------------------------------------		// painting methods	// --------------------------------------------------------------------------------		public void paint(Graphics g) {		// clear offscreen buffer		offscreen.setColor(Color.black);		offscreen.fillRect(0,0,W,H);				// draw all the game objects		//lander.paint(offscreen);				// draw offscreen buffer to screen		g.drawImage(image,0,0,this);		if (engineOn) {			currentImg = images1[orientation];		} else {			currentImg = images0[orientation];		}		g.drawImage(currentImg,0,0,this);	}		public void update(Graphics g) {		paint(g);	}	// --------------------------------------------------------------------------------		// animation code...	// --------------------------------------------------------------------------------			public void start() {		animation = new Thread(this);		if (animation != null) {			animation.start();		}	}	public void run() {		while (true) {			// update all the game objects			//lander.updatePosition();			repaint();			try {				Thread.sleep (REFRESH_RATE);			} catch (Exception exc) {				// ???			}		}	}		public void stop() {		if (animation != null) {			animation.stop();			animation = null;		}	}	// --------------------------------------------------------------------------------		// Keyboard Event code...	// --------------------------------------------------------------------------------		public boolean keyDown (Event e, int key) {		if (key == Event.UP) 			{thrust(1);}		if (key == Event.DOWN) 			{thrust(1);}		else if (key == Event.LEFT) 	{rotate(-1);}		else if (key == Event.RIGHT)  	{rotate(1);}		if (key == ' ') 		{thrust(1);}		else if (key == ',') 	{rotate(-1);}		else if (key == '.')  	{rotate(1);}		ip.play();		return true;	}	public boolean keyUp (Event e, int key) {		if (key == Event.UP) 	{thrust(0);}		if (key == ' ') 		{thrust(0);}				return true;	}		// --------------------------------------------------------------------------------		// Keyboard Response Code...	// --------------------------------------------------------------------------------		public void thrust(int n) {		if (n==1) {			engineOn = true;		} else {			engineOn = false;		}	}	public void rotate(int n) {		if (n>0) {			orientation++;		} else {			orientation--;		}		// keep orientations in range 0 to 23:		if (orientation < 0)  orientation += 24;		if (orientation > 23) orientation -= 24;	}	}